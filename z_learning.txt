PART 1/2 -> BASICS: 


SETUP:
..............

(1)Installing React: ->(a) npm create vite@latest //(faster) // bundler = vite
                     ->(b) npx create-react-app  //(slow) // bundler = webpack

(2) Files:  
    -> main.js(or index.js) file hooks up (plugs in) all of our react/js code into 'root' div of public/index.html Files.
    -> app.js is where we write our react code

..........................................................................................................

BASIC COMPONENTS:
...................

(3) JSX Basics: 
-> <h1 id="greet"> Hello </h1> ->[GETS CONVERTED TO]-> React.createElement("h1", {id: "greet"}, "Hello");  
-> anything written inside {code..} is a javscript expression. So, {{code..}} => object. & css style can be passed as js object. ex. <div style={{backgroundColor: "red"}}> Hello </div>.

(4) Props: -> are a way to pass data from parent->child component
           -> Props = properties given to a tag/component.
           Ex. App.js: <HeaderComponent name="Abhishek" />
               HeaderComponent.jsx: ({ name }){
                    return <h1>Hello {name} </h1>
               }
            -> children prop: special prop. anything that we put b/w <C1> code.. </C1> in any other component can be accessed by C1 as {children}.
            Ex. App.js: <Header> 
                            <div> Hello Abhishek, wellcome here</div>
                        <Header>
                Header.jsx: ({ children }){
                                return {children}
                } 

(5) Declarative(react) vs Imperative(js) type of coding:
    -> Declarative: declaring how what your code should look like based on specefic data that's passed
    -> Imperative: step-by-step process, do this , then do this ... ex. create h1, append in div ....

..........................................................................................................

BASIC STATEFUL COMPONENTS(useState):
.......................................

(6) whenever any state changes, the entire component(along with its child components) that is using that state gets re-rendered along with the state.

(7) (See 1->Incrementby2.jsx) Suppose we have a state->age & we want to increase it by 2 whenever a button is clicked. Then:
        const [age, setAge] = useState(0);
        const handleClick = () => {
            setAge(age+1);
            setAge(age+1);
        }
     return <button onClick={handleClick}>Click</button>

     -> when we click this button, we will see that the age increases by 1 only. This is bcoz react batches state updates when made in quick succession & state will get updated only after the component is re-rendered.

     sol: using prevState: const handleClick = () => {
                                setAge(prevAge => prevAge + 1); // First update  
                                setAge((prevAge) => {
                                   return prevAge + 1; // Second update; Note: both lines are same
                                })    
                            }

..........................................................................................................

COMPONENT LIFECYCLE:
.............................

(8) VIRTUAL DOM:
Virtual DOM in React is an abstraction of the actual DOM. It is a lightweight copy of the real DOM that React maintains to optimize rendering and improve performance. Hereâ€™s how it works and why it's important:

    -> Representation: When you create React components, React creates a virtual representation of the UI in memory, known as the Virtual DOM. This representation consists of a tree of React elements.

    -> Reconciliation: When the state of a component changes, React updates the Virtual DOM instead of the real DOM immediately. It then compares the new Virtual DOM with the previous version (this process is called "reconciliation").

    -> Diffing: React uses an efficient algorithm to determine what has changed between the two Virtual DOM trees. It identifies the differences (or "diffs") and figures out the minimal set of changes needed to update the real DOM.

    -> Batch Updates: Once React has identified the changes, it updates the real DOM in a batch process, making only the necessary updates. This minimizes the number of direct manipulations to the real DOM, which can be slow and resource-intensive.   

(9) component Lifecycle: 3 steps: (1) Mounting(Initial render) (2) Updates(re-render): happens when some state of the component or the parent component changes. (3) Unmounting

(10) Pure fxns. = fxns. which satisfy 2 rules: 1. Deterministic(same I/P=> same O/P) & 2. No side effects: => does not change any external state

(11) UseEffect Hook: performs side effects. useEffect(()=> fxn., []) : takes up a fxn. & a dependency array as arg. and calls the fxn. whenever any element in the dependency array changes.
    -> if no array is passed(not even empty array): fxn. will be called whenever component is re-rendered + on Initial render
    -> if empty array is passed: fxn. will be called only on the Initial render(mounting of component)
    -> if we pass an object inside dependency array, then useEffect will run every time the component re-renders, regardless of whether the contents of the object have changed. This is because, in js objects are reference types & on every render, since object is alloted new memory, reference to object changes.
    -> when we are using an eventListener inside useEffect, it will create a new eventListener everytime the fxn is called, without clearing/Unmounting the older eventListener(s). To, unmount, write code:
    useEffect(()=>{
        const handlerFxn = () => {..some code}
        document.addEventListener("click", handlerFxn)
        return () => {
            document.removeEventListener("click", handlerFxn)
        }
    },[a,b,c])

(12) (Q) Implement debouncing: there is a state 'name' which takes up user input as its value. We want to console.log(name) after every 1 sec that name changes. Ex. user types "a"@t=0s "ab"@t=0.4s "abh"@0.7s "abhi"@0.95s "abhis"@1.2s "abhish"@1.4s ""abhishe"@1.7s and "abhishek" @1.8s
then we will conosole log only "abhi" @t=1s and "abhishek" @t=2s and not anything in-b/w(ie, we don't clog a or ab or abh or abhis, etc.).
    (sol) usual approach => useEffect(()=> setTimeout(clog), [name]) but this will not work. (this will delay clogs by 1s each but will log "a", then "ab", then "abc" and so on). So, what we need to do is to unmount the setTimeout if name has changed within 1sec.

    useEffect(() => {
        const timeout = setTimeout(() => {
            console.log(name)
        }, 1000)
        return () => {
            clearTimeout(timeout)
        }
    }, [name])

(13) Class Components Lifecycle Methods:

(14) StrictMode: in main.jsx(or index.jsx):    
        createRoot(document.getElementById("root")!).render(
            <StrictMode>
                <App />
            </StrictMode>
        )
    
    -> It simulates mounting->Unmounting->Remounting of component, and hence helps detect unnecessary side effects, etc.

(15) Fetching data from api:
    (a) Using fetch:
    const [users, setUsers] = useState();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState();

    useEffect(()=>{
        setLoading(true)
        setError(undefined)
        const controller = new AbortController()
        fetch("https://jsonplaceholder/users", { signal: controller.signal })
        .then(res => {
            if (res.status === 200) return res.json()
            else return Promise.reject(res)
        })
        .then(data => {
            setUsers(data)
        })
        .catch(e => {
            if(e?.name === "AbortError") return
            setError(e)
        })
        .finally(() => setLoading(false))

        return (()=>{
            controller.abort()
        })
    },[])

    (b) using Axios(recommended):

..........................................................................................................

ADVANCED COMPONENTS:
........................

(16) Conditional Rendering: 
    (a) <div>{isLoading && <LoadingComponent />}</div>
    (b) {isLoading? ( 
            <LoadingComponent />
            ) : (
            <UserDataComponent />
            )
        }

(17) Spread operator: suppose we have [users, setUsers] state in app.js, which is an array of objects where each object has props: name, age, address, etc. We have a userData Component to display data of a particular user: ({name, age, address}) 
        <div> {name}</div> 
        <div> {age}</div> 
        <div> {address}</div> 

in app.js: we want to pass these props when using UserData component within it.
    M1: <UserData name={user.name} age={user.age} address = {user.address} />

    M2: <UserData {...user} />

.........................................................................................................

BASIC HOOKS:
........................

(18) Hooks must be put at top(lines) of functional component bcoz of how react tracks them. React relies on the order in which hooks are called to maintain the state and side effects correctly. If hooks are called conditionally or within loops, the order of hooks might change between renders, leading to bugs and inconsistent behavior.

(19) useRef Hook: has 2 use-cases: 
    (1) Mutable Values: Store values that need to persist without triggering re-renders.
        const data = useRef("Abhishek") //Abhishek = default value
        clog(data.current) //.current will return current value of useRef var.
    -> now if lets say we are changing this 'data' as user input changes. Then it will not force component to re-render, instead, the updated value will be stored & reflect on UI when the component re-renders(due to some state change).

    -> if we update the value of "state" var. (ex. using button onclick), then its value will change & also reflect the same on UI(component re-renders);
    -> if we update the value of a "let" var. (ex. using button onclick), then its value will change but won't reflect the same on UI(component does'nt re-render); also finally, when the component re-renders(due to some state/prop change), "let" var. ki value will not persist and it will take back its initial value.
    -> if we update the value of a "ref" var. (ex. using button onclick), then its value will change but won't reflect the same on UI(component does'nt re-render); also finally, when the component re-renders(due to some state/prop change), "ref" var. ki value will persist and it will finally reflect on the UI.

    (2) as a Reference to DOM Elements: Use useRef to interact with DOM nodes: 
        Ex. const inputRef = useRef()
            <input ref={inputRef} value={value}/>
        // now, inputRef.current = <input value={value}/> tag itself & inputRef.current.value = current input value 

(20) useMemo Hook: memoizes/caches the "result" of a function call and returns the cached result when the dependencies have not changed.
    -> useMemo(fxn., []);
    ex. const filteredData = useMemo(() => {
            return data.filter(n => n.includes(query))
        },[query])
    
    -> Note: It only memoizes the last queried data 

(21) useCallback Hook: caches fxn. (react recreates all the fxns. on re-renders, so caching a fxn. can be done using this hook). This is useful when passing functions as props to child components.
    -> useCallback(fxn., []);
    -> note: useCallback caches the whole fxn. while useMemo caches only the return value of a fxn. call

(22) Custom Hooks: We can create a custom hook(fxn.) by combining built-in hooks & adding our logic.
 Ex. we can create useFetch hook to handle api responses: //in useFetch.jsx: 
export function useFetch(url) {
  const [data, setData] = useState()
  const [isLoading, setIsLoading] = useState(true)
  const [isError, setIsError] = useState(false)
  const controller = new AbortController()
  useEffect(() => {
    setData(undefined)
    setIsLoading(true)
    setIsError(false)

    fetch(url)
      .then((res) => {
        if (res.status === 200) {
          return res.json()
        }
        return Promise.reject(res)
      })
      .then((val) => setData(val))
      .catch((e) => {
        if (e?.name === "AbortError") return
        setIsError(true)
      })
      .finally(() => {
        if (controller.signal.aborted) return
        setIsLoading(false)
      })

    return (
      () => {
        controller.abort()
      },
      [url]
    )
  })
 return { data, isLoading, isError }
}

// in App.jsx: const { data, isLoading, isError } = useFetch('https://placeholder.json/users')

.........................................................................................................

FORMS:
...........

(23) onSubmit: e.preventDefault() : default=> it sends a request to url we're currently on

(24) one-way data flow in react: data can flow from Parent->Child but not V.V. ie, parent can send data down to child component as props, and hence, child can get the access/readonly to parent's state, but child cannot modify the parent state directly.
-> If we want to modify a parent's state in child component, we can only do so by calling a fxn. defined in parent's component: 
    Ex. Parent(){
            const [data, setData] = useState("Initial Text")
            function updateData(newText){
                setData(newText)
            }
            return (
                <Child data={data} updateFxn={updateData}>
            )
        }

        Child({data, updateFxn}){
            return(
                <button onClick={() => updateFxn("New Updated Text")}> Update Text </button>
            )
        }
    
(25) React Hook Form(form library):

.........................................................................................................

CONTEXT API:
...................................

(26) Prop Drilling: Data can only be sent down heirarchially(as props) : P->C->GC->GGC->... (we cannot directly send data from P->GGC). 
Solution: Create global state/context that can be accessed/modified directly by any component.

(27) useReducer Hook(): Is used to create a state along with a reducer fxn. that handles how the state updates/modifies.
    const [state, dispatch] = useReducer(reducer, initialState)
    -> it takes up reducer fxn & initialState(initial value of state var.) as args. and returns state(ie, state var.) & dispatch fxn.
    -> When we call the dispatch fxn. (with args.: action.type & action.payload)  -> it dispatches an action, which calls the reducer fxn with given args.
    -> Ex. we want to create a counter with increment and decrement buttons, with initial value = 0
           (we also want a button which on click will add 10 to the counter value)
        
        //reducer fxn. is often put outside of export function component(){}
        function reducer(count, action){  //or (count, {type, payload})
            switch(action.type){
                case "Decrement": return count-1     //note: completely overwrites the state
                case "Increment": return count+1
                case "AddTen": return count+ action.payload.value
                default: return count
            }
        }
        
        export function CounterComponent(){
            const [count, dispatch] = useReducer(reducer, {initialCount: 0})

            return(
                <button onClick = {() => dispatch({type: "Decrement"})}> - </button>
                <button onClick = {() => dispatch({type: "Increment"})}> + </button>
                <button onClick = {() => dispatch({type: "AddTen", payload: {value: 10}})}> Add 10 </button>
            ) 
        }

    -> useReducer fxn. can take up a 3rd arg. which is a callback fxn.(init fxn.) which is used to initialize the state in a more complex way than simply providing an initial state value.
        const [state, dispatch] = useReducer(reducer, initialArg, init?)
    -> note: if the init fxn. requires an arg., you can put that arg. in place of initialArg, else you can put null in place of initialArg if you are using init fxn.
        

(28) useContext Hook: is used to share the state b/w all the components.
    ex. Suppose we have a isDarkMode state (a state that stores if the app is in dark or light mode) and a fxn to toggle the mode. We have P->C->GC;
    In P: const [isDarkMode, setIsDarkMode] = useState(false)
          function toggleTheme(){
            setIsDarkMode(prevMode => !prevMode)
          }
    
    (S1) in P: create & export context outside the component: export const ThemeContext = createContext()

    (S2) Wrap the P component with ThemeProvider & pass all the data(state, fxn. to change state) in value prop which you want to share: <ThemeProvider.Provider value = {{isDarkMode, toggleTheme}}>P</ThemeProvider>

    (S3)  In GC: you can access theses values as: const value = useContext(ThemeContext);
            // now, value.isDarkMode & value.toggleTheme can be accessed and state can be modified

(29) Enviromental Vars.: 
    -> In .env.local: Add Prefix VITE_  (or REACT_APP_ for CRA)to the vars. which you want to expose to client.
    -> Env. var. can accessed as: {import.meta.env.<Var_Name>} (or process.env. for CRA)
    -> .env.development.local & .env.production.local can be separately created for specefix modes

.........................................................................................................

ROUTING:
...........

(30) routing without a library: using window.location.pathname 

react-router-dom library: 

(31) Creating Routes using createBrowserRouter:
    In router.jsx: 
        export const router = createBrowserRouter([
            { path: "/", element: <Home /> },
            { path: "/about", element: <About /> },
        ])
    
    and in Navbar.jsx: 
        <Link to = "/"> Logo <li>
        <Link to = "/about"> About <li>

(32) Provide router to app:
    In main.jsx: 
        <React.StrictMode>
            /*  <App />  */ (commented)
            <RouterProvider router={router} />
        </React.StrictMode>

(33) Nested Routes using nesting(children) + outlet: ex. we have a navbar component which we want to display in 2 pages: /home , /about: 
    In router.jsx:
        export const router = createBrowserRouter([
            {
                path: "/",
                element: <NavBar />,
                children: [
                    { path: "/", element: <Home /> },
                    { path: "/about", element: <About /> },
                ]
            }
        ])

    & In NavLayout.jsx:
        export function NavLayout(){
            return (
                <>
                    <NavBar />
                    <Outlet /> // placedholder for nested component
                </Outlet>
            )
        }

-> Note: We can pass some data to the nested component as:
    In NavLayout.jsx: <Outlet context = "Some data from outlet" />

    & In About.jsx: const outletData = useOutletContext()
                    clog(outletData) // "Some data from outlet"

(34) Absolute & Relative Linking: 
    -> Absolute: <Link to = "/products/phones" /> => URL: localhost:3000/products/phones 
    -> Relative: Suppose we are in '/products' page & in this page we have a link:
                <Link to = "phones"> , => URL: localhost:3000/products/phones, 
        ie, this route(phones) will be appended to the current route(/products)

-> Active Links: 
    NavLink gives us {isActive} using which we can highlight the page mentioned in our navbar that we currently are in.
    <NavLink to="/" className = {({isActive}) => {`bg-blue m-4 p-8 ${isActive? "text-orange-700" : "text-black"} `}} : 

(35) Dynamic Routes(using :prefix): Suppose we have products page which shows list all the products & we want user to redirect to the specefic product page he click on.
     In router.jsx:
        export const router = createBrowserRouter([
            {
                path: "/products" 
                element: <Products />,
                children: [
                    { path: ":productId", element: <Product /> },
                ]
            }
        ])

    -> This dynamic route can be accessed as:
        const {productId} = useParams()

    So, in product.jsx:
        export function Product(){
            const {productId} = useParams()
             const product = products.find((product) => product.id === parseInt(productId));
            return (
                <div>
                    <h2>{product.name}</h2>
                    <p><strong>Price: </strong> {product.bio}</p>
                    <img src= {product.image} />
                </div>
            ) 
        }
    
(36) catchAllRoutes: *
    -> Navigate Component to redirect to a page when user tries to access some route:
        ex. router.jsx: when a signedin user tries to access signup page, we redirect him to homepage
            { path: "/signup", element: <Navigate to="/">  } 

    -> ex. if we want to navigate user to posts page whenever he tries to be in homepage, we can do: 

            {
                path: "/",
                element: <RootLayout />,
                children: [
                    { index: true, element: <Navigate to="/posts" /> },
                    { path: "posts", element: <PostList /> },
                    { path: "users", element: <UserList /> },
                ]
            }

    -> useNavigate() hook to navigate user based on some event(ex. button click)
        ex. In Homepage.jsx: 
        const navigate = useNavigate()
        const handleClick = () => {
            navigate('/profile');
        };
        return (
            <button onClick={handleClick}>Go to Profile</button>
        );

(37) loader fxn. in router: is used to fetch data before a route component renders.
    ex. In router.jsx:
        { path: "/products", 
          element: <Products />, 
          loader: ({params, request: {signal}}) => {
            return fetch('https://placedholderdata.com/products', { signal })
        }},
    
-> the data recieved can be accessed by <Products> component using useLoaderData() hook. 
-> const {state} = useNavigation() hook can be used to access current state(loading or idle or submitting) of the fetch request.
    In Products.jsx: 
        export function Products(){
            const products = useLoaderData()
            const { state } = useNavigation()


            return (
                {state == "loading"? ( <h1> Loading...</h1> ) : 
                 ( <div>
                    {products.map(() => {code...})}
                 </div> )}
            )
        }
    
-> <ScrollRestoration />

(38) Search Params: 
    -> <Form> Element of react-router-dom: automatically collects form data upon submission.
    -> Ex., in todos page, we have a list of todos and a searchbar to search/filter todo(s).
        In router.jsx: 
        { path: "/todos", element: <Todos>,
          loader: async({request: {signal, url}}) => {
            const searchParams = new URL(url).searchParams
            const todoquery = searchParams.get("todoquery")
            return { searchParams: {todoquery}, todos: await fetch(`https:jsonplaceholder.data/todos?q=${todoquery}` , { signal })} 
          } 
        }
    & In Todos.jsx:
        const { searchParams: {todoquery}, todos } = useLoaderData() 

    -> action fxn.: it's typically used for handling mutating operations like form submissions: PUT, POST, DELETE requests, or other changes to server-side data.   
    Ex. In /newtodo page, we have a form which asks user to enter new todo and on submission, adds this todo to the todos[].
    In router.jsx:
        { path: "/newtodo" , element: <NewTodo />,
          action: async({ request }) => {
            const formData = await request.formData()
            const newTodoTitle = formData.get("title")
            //data validation
            if(newTodoTitle === "") return "Title is required"
            const todo = await fetch("https:jsonplaceholder.data/todos", {
                method: "POST",
                signal: request.signal,
                headers: {
                    "Content-Type" : "application/json", 
                },
                body: JSON.stringify({ title: newTodoTitle, completed: false})

            }).then(res => res.json())

            return redirect("/")
          }
        }

    -> if the return of action fxn. is not redirect(ie, its some validation error, etc.), we can access it in AddNewTodo.jsx: 
                    export function AddNewTodo(){
                        const errorMessage = useActionData()
                        return (
                            <>
                            <Form method = "post"> Code..//form feilds </Form>
                            </>
                        )
                    }

......................................................................................................................................................................................................................
PART 2/2 -> ADVANCED: 

ADV. REACT CONCEPTS:
........................

(39) -> createPortal: can be used to render an element outside of its usual DOM position.
    -> forwardRef: when passing ref to another component/fxn. as a prop, we need to wrap that component/fxn. with forwardRef.

.........................................................................................................

TYPE SAFETY:
................

(40) propTypes: when not using TS, we get warning whenever we use props. We can use proptypes library to define the proptypes.

...........................................................................................................

(41) Handling large list/array of data: use tanstack library as it improves performance by just rendering the elements of array vidible on the screen

(42) Button -> a: <Button As="a"> Click this link </Button>

...........................................................................................................

TANSTACK / REACT QUERY:
...........................

(43) is a library to manage async state in react. we can fetch, cache & update data from server using it.
    Query = Getting data from somewhere, Mutation = Modifying the data
(44) 
-> S1: Install: npm i @tanstack/react-query   &   npm i @tanstack/react-query-devtools
-> S2: Provide react-query to app by wrapping it:
    In main.tsx: 
    import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

    const queryClient = new QueryClient()
    <QueryClientProvider client={queryClient}>
        <App />
    </QueryClientProvider>

(45) useQuery() Hook: takes up a 'queryKey' (which is a unique array key) & ''queryFn' which is a fxn. to do data fetching.
    Ex.: const postsQuery = useQuery({
            queryKey: ["posts"],
            queryFn: () => {
                return axios.get("https://jsonplaceholder.com/posts").then(res => res.data)
            },
           //refetchInterval: 1000 //optional => data will be re-fetched every second 
        })
    
(46) useMutation() Hook: takes up a 'mutationFn' using which we modify the data.
    Ex. adding a new post:
    const newPostMutation = useMutation({
        mutationFn: (title) => {
            return ..code.then(()=> Posts.push({id: crypto.reandomuuid(), title}))
        }
    })
    -> we can use this as : newPostMutation.mutate({});

(47) caching & useQueryClient() hook: when we add a new post using above newPostMutation fxn., it will add new post in Posts array but will not display the new post on UI untill next re-render (by some other state change) due to caching. 
-> We can update the UI as soon as new post is added to Posts array by doing :
    const queryClient = useQueryClient()
    const newPostMutation = useMutation({
        mutationFn: (title) => {
            return ..code.then(()=> Posts.push({id: crypto.reandomuuid(), title}))
        }
    },
    onSuccess: () => {
        queryClient.invalidateQuery(["posts"], {//filters to specefically target particular mutation})
    })

(48) recommended naming convention for queryKey: 
     /posts :                       queryKey: ["posts"]
     /posts/1 (ie, /posts/:post.id):        queryKey: ["posts", post.id]
     /posts?authorId=1             :        queryKey: ["posts", { authorId: 1}]
     /posts/2(ie,:post.id)/comments:        queryKey: ["posts", post.id, "comments"]

(48) useQuery() in detail:
    
    -> .status & .fetchStatus : while doing data fetching using useQuery();
        When component Mounts (for the first time): postsQuery.fetchStatus = "fetching" & postsQuery.status = "loading" ; Now, if data has been successfully fetched: .fetchStatus = ""idle , .status = "success"; 
        Now for further re-mounting/re-fetching of data, .fetchStatus = "fetching" & .status = "success" (ie, it will hold its previous value) & when re-fetching completes: .fetchStatus = "idle" & .status = "success" (or "error" if fetching failed)

    -> enabled key in useQuery can be used to do data fetching from an api1 only if data hs been fetched from api2. 

    -> const {status, data, error} = useQuery({//code here})

(49) useMutation() in detail:
    -> onMutate fxn is used as a key in useMutation() to set up context and this fxn. is executed before the mutationFn is called
    -> setQueryData key can be used to manually cache new mutated data so that it renders instantly on the UI